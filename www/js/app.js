// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('starter', ['ionic', 'starter.controllers']).run(function($ionicPlatform) {
    $ionicPlatform.ready(function() {
      if (window.cordova && window.cordova.plugins.Keyboard) {
        cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
      }
      if (window.StatusBar) {
        StatusBar.styleDefault();
      }
    });
  }).config(function($stateProvider, $urlRouterProvider, $httpProvider) {
    $stateProvider.state('app', {
      url: '/app',
      abstract: true,
      templateUrl: 'templates/menu.html',
      controller: 'AppCtrl'
    }).state('app.search', {
      url: '/search',
      views: {
        'menuContent': {
          templateUrl: 'templates/search.html'
        }
      }
    }).state('app.browse', {
      url: '/browse',
      views: {
        'menuContent': {
          templateUrl: 'templates/browse.html'
        }
      }
    }).state('app.playlists', {
      url: '/playlists',
      views: {
        'menuContent': {
          templateUrl: 'templates/playlists.html',
          controller: 'PlaylistsCtrl'
        }
      }
    }).state('app.single', {
      url: '/playlists/:playlistId',
      views: {
        'menuContent': {
          templateUrl: 'templates/playlist.html',
          controller: 'PlaylistCtrl'
        }
      }
    }).state('app.listnew', {
      url: '/listnew',
      views: {
        'menuContent': {
          templateUrl: 'templates/listnew.html',
          controller: 'ListsCtrl'
        }
      }
    }).state('app.listnew_step_0', {
      url: '/listnew_step_0',
      views: {
        'menuContent': {
          templateUrl: 'templates/create_list_step_0.html',
          controller: 'ListsCtrl'
        }
      }
    }).state('app.listnew_step_1', {
      url: '/listnew_step_1',
      views: {
        'menuContent': {
          templateUrl: 'templates/create_list_step_1.html',
          controller: 'ListsCtrl'
        }
      }
    }).state('app.listnew_step_sheare', {
      url: '/listnew_step_sheare',
      views: {
        'menuContent': {
          templateUrl: 'templates/create_list_step_sheare.html',
          controller: 'ListsCtrl'
        }
      }
    }).state('app.listnew_step_message', {
      url: '/listnew_step_message',
      views: {
        'menuContent': {
          templateUrl: 'templates/create_list_step_message.html',
          controller: 'ListsCtrl'
        }
      }
    }).state('app.listnew_step_confirm_message', {
      url: '/listnew_step_confirm_message',
      views: {
        'menuContent': {
          templateUrl: 'templates/create_list_step_confirm_message.html',
          controller: 'ListsCtrl'
        }
      }
    }).state('app.colaborate_join', {
      url: '/colaborate_join',
      views: {
        'menuContent': {
          templateUrl: 'templates/colaborate_join.html',
          controller: 'ListsCtrl'
        }
      }
    }).state('app.colaborate', {
      url: '/colaborate',
      views: {
        'menuContent': {
          templateUrl: 'templates/colaborate.html',
          controller: 'ListsCtrl'
        }
      }
    }).state('app.colaborate_price', {
      url: '/colaborate_price',
      views: {
        'menuContent': {
          templateUrl: 'templates/colaborate_price.html',
          controller: 'ListsCtrl'
        }
      }
    });

    /*
    authProvider.init
      domain: 'garden-model.auth0.com'
      clientID: 'YzFwJpiJrxePpXFUfsswsKA8ezpq0xhW'
      loginState: 'login'
    
    
     * ...
    
    jwtInterceptorProvider.tokenGetter = (store, jwtHelper, auth) ->
      idToken = store.get('token')
      refreshToken = store.get('refreshToken')
       * If no token return null
      if !idToken or !refreshToken
        return null
       * If token is expired, get a new one
      if jwtHelper.isTokenExpired(idToken)
        auth.refreshIdToken(refreshToken).then (idToken) ->
          store.set 'token', idToken
          idToken
      else
        idToken
    
    $httpProvider.interceptors.push 'jwtInterceptor'
     * ...
    
     * ---
    
    
    
     * if none of the above states are matched, use this as the fallback
     */
    $urlRouterProvider.otherwise('/app/listnew');
  });


  /*
  ).run (auth) ->
       * This hooks all auth events to check everything as soon as the app starts
      auth.hookEvents()
   */

}).call(this);
